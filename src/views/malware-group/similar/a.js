// Express server on port 3000  (http://localhost:3000)
function calculateDaysBetweenDates(begin, end) {    
    var diff = Math.floor(end.getTime() - begin.getTime());
    var day = 1000 * 60 * 60 * 24;
    var days = Math.floor(diff/day);
    return days;
}


// find all images without alternate text
// and give them a red border
function process() {
    var images = document.getElementsByTagName('img');
    for (var i = 0; i < images.length; i++) {
        if (!images[i].alt) {
            images[i].style.border = '5px solid red';
        }
    }
}

// write a js function to call a python program 
function callPython() {   
    var spawn = require("child_process").spawn;
    var process = spawn('python',["./hello.py"]);
    process.stdout.on('data', function(data) {
        console.log(data.toString());
    });
}

// write a front end page using vue and element-ui  
function vuePage() {
    <template>
        <div>
            <el-button @click="visible = true">Button</el-button>
            <el-dialog :visible.sync="visible" title="Hello world">
                <p>Try Element</p>
            </el-dialog>
        </div>
    </template>
    <script>
        export default {
            data() {
                return {
                    visible: false
                };
            }
        };
    </script>
    <style>
        .el-dialog__wrapper {
            width: 30%;
        }
    </style>
}


// write an online chatting page using vue and element ui, 
// the chat box should appear with some animate effect
function chatPage() {   
    
// write a cypher statement to show the relationship called "SIMILAR_TO",
// limit 60
// should show the sub graph with the most relationship


// write a cypher statement to calculate the jaccard similarity between two nodes with label "website"
// and return the similarity value



// write a login page using vue and element ui, it should look beautiful
<template>
    <div>
        <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px" class="demo-ruleForm">
            <el-form-item label="Username" prop="name">
                <el-input v-model="ruleForm.name"></el-input>
            </el-form-item>
            <el-form-item label="Password" prop="password">
                <el-input type="password" v-model="ruleForm.password" auto-complete="off"></el-input>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" @click="submitForm('ruleForm')">Login</el-button>
                <el-button @click="resetForm('ruleForm')">Reset</el-button>
            </el-form-item>
        </el-form>
    </div>
</template>
<script>


    export default {
        data() {
            return {
                ruleForm: {
                    name: '',
                    password: ''
                },
                rules: {
                    name: [
                        { required: true, message: 'Please input username', trigger: 'blur' },
                        { min: 3, max: 5, message: 'Length should be 3 to 5', trigger: 'blur' }
                    ],
                    password: [
                        { required: true, message: 'Please input password', trigger: 'blur' },
                        { min: 3, max: 5, message: 'Length should be 3 to 5', trigger: 'blur' }
                    ]
                }
            };
        },
        methods: {
            submitForm(formName) {
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        alert('submit!');
                    } else {
                        console.log('error submit!!');
                        return false;
                    }
                });
            },
            resetForm(formName) {
                this.$refs[formName].resetFields();
            }
        }

    }
</script>
























